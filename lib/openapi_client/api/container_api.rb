=begin
#PharmaTrace Supply Chain Information Network API

#The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.

OpenAPI spec version: 0.0.1
Contact: api@pharmatrace.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.2

=end

require 'uri'

module OpenapiClient
  class ContainerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Location History
    # Returns the location history of a container or a individually labeled pharmaceutical
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id container id of the tracked container.
    # @option opts [Integer] :offset Offset the list of returned results by this amount. Default is zero.
    # @option opts [Integer] :limit Number of items to retrieve. Default is 5, maximum is 100.
    # @return [Locations]
    def location_history_get(opts = {})
      data, _status_code, _headers = location_history_get_with_http_info(opts)
      data
    end

    # Location History
    # Returns the location history of a container or a individually labeled pharmaceutical
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_id container id of the tracked container.
    # @option opts [Integer] :offset Offset the list of returned results by this amount. Default is zero.
    # @option opts [Integer] :limit Number of items to retrieve. Default is 5, maximum is 100.
    # @return [Array<(Locations, Fixnum, Hash)>] Locations data, response status code and response headers
    def location_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerApi.location_history_get ...'
      end
      # resource path
      local_var_path = '/locationHistory'

      # query parameters
      query_params = {}
      query_params[:'container_id'] = opts[:'container_id'] if !opts[:'container_id'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Locations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerApi#location_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
