=begin
#PharmaTrace Supply Chain Information Network API

#The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.

OpenAPI spec version: 0.0.1
Contact: api@pharmatrace.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'date'

module OpenapiClient
  class Container
    # Unique identifier representing a specific container.
    attr_accessor :container_id

    # EPC code
    attr_accessor :epc_code

    # Serialization label.
    attr_accessor :label

    # barcode on container. Normally equal to container id.
    attr_accessor :barcode

    # RFID of RF tracking label on conatiner.
    attr_accessor :rf_id

    # quantity of product in container.
    attr_accessor :quantity

    # Unit for quantity measurement.
    attr_accessor :unit

    # Location id of last tracked locaction.
    attr_accessor :current_location_id

    # stakeholder id of the last tracked owner of the container.
    attr_accessor :owner_stakeholder_id

    # id of the parent container or null.
    attr_accessor :parent_container_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'container_id' => :'container_id',
        :'epc_code' => :'epc_code',
        :'label' => :'label',
        :'barcode' => :'barcode',
        :'rf_id' => :'rf_id',
        :'quantity' => :'quantity',
        :'unit' => :'unit',
        :'current_location_id' => :'current_location_id',
        :'owner_stakeholder_id' => :'owner_stakeholder_id',
        :'parent_container_id' => :'parent_container_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'container_id' => :'String',
        :'epc_code' => :'String',
        :'label' => :'String',
        :'barcode' => :'String',
        :'rf_id' => :'String',
        :'quantity' => :'Float',
        :'unit' => :'String',
        :'current_location_id' => :'String',
        :'owner_stakeholder_id' => :'String',
        :'parent_container_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'container_id')
        self.container_id = attributes[:'container_id']
      end

      if attributes.has_key?(:'epc_code')
        self.epc_code = attributes[:'epc_code']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.has_key?(:'rf_id')
        self.rf_id = attributes[:'rf_id']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.has_key?(:'current_location_id')
        self.current_location_id = attributes[:'current_location_id']
      end

      if attributes.has_key?(:'owner_stakeholder_id')
        self.owner_stakeholder_id = attributes[:'owner_stakeholder_id']
      end

      if attributes.has_key?(:'parent_container_id')
        self.parent_container_id = attributes[:'parent_container_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          container_id == o.container_id &&
          epc_code == o.epc_code &&
          label == o.label &&
          barcode == o.barcode &&
          rf_id == o.rf_id &&
          quantity == o.quantity &&
          unit == o.unit &&
          current_location_id == o.current_location_id &&
          owner_stakeholder_id == o.owner_stakeholder_id &&
          parent_container_id == o.parent_container_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [container_id, epc_code, label, barcode, rf_id, quantity, unit, current_location_id, owner_stakeholder_id, parent_container_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
